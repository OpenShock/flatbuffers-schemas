namespace OpenShock.Serialization.Configuration;

table RFConfig {
  /// The GPIO pin connected to the RF modulator's data pin for transmitting (TX)
  tx_pin:int8;

  /// Whether to transmit keepalive messages to keep the shockers from entering sleep mode
  keepalive_enabled:bool;
}

table EStopConfig {
  enabled:bool;

  /// The GPIO pin connected to the E-Stop button
  gpio_pin:int8;

  /// Persistent state of the E-Stop button
  active:bool;

  /// Set When EmergencyStop is a latching switch
  latching:bool;
}

table WiFiCredentials {
  /// ID of the WiFi network credentials, used for referencing the credentials with a low memory footprint
  id:uint8;

  /// SSID of the WiFi network
  ssid:string;

  /// Password of the WiFi network
  password:string;
}

table WiFiConfig {
  /// Access point SSID
  ap_ssid:string;

  /// Hub hostname
  hostname:string;

  /// WiFi network credentials
  credentials:[WiFiCredentials];
}

table CaptivePortalConfig {
  /// Whether the captive portal is forced to be enabled
  /// The captive portal will otherwise shut down when a gateway connection is established
  always_enabled:bool;
}

table BackendConfig {
  /// Domain name of the backend server, e.g. "api.shocklink.net"
  domain:string;

  /// Authentication token for the backend server
  auth_token:string;

  /// Override the Live-Control-Gateway (LCG) URL
  lcg_override:string;
}

table SerialInputConfig {
  /// Whether to echo typed characters back to the serial console
  echo_enabled:bool = true;
}

enum OtaUpdateChannel:uint8 {
  Stable = 0,
  Beta = 1,
  Develop = 2
}

enum OtaUpdateStep:uint8 {
  None = 0,
  Updating = 1,
  Updated = 2,
  Validating = 3,
  Validated = 4,
  RollingBack = 5,
}

// Represents configuration for Over-The-Air (OTA) updates.
table OtaUpdateConfig {
  /// Indicates whether OTA updates are enabled.
  is_enabled:bool;

  /// The domain name of the OTA Content Delivery Network (CDN).
  cdn_domain:string;

  /// The update channel to use.
  update_channel:OtaUpdateChannel;

  /// Indicates whether to check for updates on startup.
  check_on_startup:bool;

  /// Indicates whether to check for updates periodically.
  check_periodically:bool;

  /// The interval in minutes between periodic update checks.
  check_interval:uint16;

  /// Indicates if the backend is authorized to manage the hub's update version on behalf of the user.
  allow_backend_management:bool;

  /// Indicates if manual approval via serial input or captive portal is required before installing updates.
  require_manual_approval:bool;

  /// Update process ID, used to track the update process server-side across reboots.
  update_id:int32;

  /// Indicates what step of the update process the hub is currently in, used to detect failed updates for status reporting.
  update_step:OtaUpdateStep;
}

table HubConfig {
  /// RF Transmitter configuration
  rf:RFConfig;

  /// WiFi configuration
  wifi:WiFiConfig;

  /// Captive portal configuration
  captive_portal:CaptivePortalConfig;

  /// Backend configuration
  backend:BackendConfig;

  /// Serial input configuration
  serial_input:SerialInputConfig;

  /// OTA update configuration
  ota_update:OtaUpdateConfig;
  
  /// E-Stop configuration
  estop:EStopConfig;
}

root_type HubConfig;
